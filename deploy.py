import time
from web3 import Web3
from web3.exceptions import ContractLogicError
from eth_account import Account

ipc_path = r'\\.\pipe\geth.ipc'

def connect_to_geth(ipc_path, max_retries=31, delay=2):
    retries = 0
    while retries < max_retries:
        try:
            w3 = Web3(Web3.IPCProvider(ipc_path))
            # Cek koneksi dengan permintaan sederhana
            if w3.eth.block_number is not None:
                print("Connected to Geth successfully.")
                return w3
            else:
                raise Exception("Failed to connect to Geth.")
        except Exception as e:
            retries += 1
            print(f"Connection failed: {e}. Retrying... (Attempt {retries})")
            time.sleep(delay)
    raise Exception("Max retries reached. Could not connect to Geth.")

w3 = connect_to_geth(ipc_path)


# ABI dan Bytecode dari kontrak yang akan dideploy
abi = [{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"dataList","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"string","name":"data","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDataCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"retrieveData","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_data","type":"string"}],"name":"storeData","outputs":[],"stateMutability":"nonpayable","type":"function"}]
bytecode = '6080604052348015600f57600080fd5b506109b78061001f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80635bee29b7146100515780637355a42414610082578063af4a74cf146100a0578063fb218f5f146100d1575b600080fd5b61006b60048036038101906100669190610373565b6100ed565b60405161007992919061043f565b60405180910390f35b61008a6101fc565b604051610097919061046f565b60405180910390f35b6100ba60048036038101906100b59190610373565b610208565b6040516100c892919061043f565b60405180910390f35b6100eb60048036038101906100e691906105bf565b6102c4565b005b600060606000805490508310610138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012f90610654565b60405180910390fd5b600080848154811061014d5761014c610674565b5b90600052602060002090600202019050806000015481600101808054610172906106d2565b80601f016020809104026020016040519081016040528092919081815260200182805461019e906106d2565b80156101eb5780601f106101c0576101008083540402835291602001916101eb565b820191906000526020600020905b8154815290600101906020018083116101ce57829003601f168201915b505050505090509250925050915091565b60008080549050905090565b6000818154811061021857600080fd5b9060005260206000209060020201600091509050806000015490806001018054610241906106d2565b80601f016020809104026020016040519081016040528092919081815260200182805461026d906106d2565b80156102ba5780601f1061028f576101008083540402835291602001916102ba565b820191906000526020600020905b81548152906001019060200180831161029d57829003601f168201915b5050505050905082565b6000604051806040016040528042815260200183815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101908161032391906108af565b50505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6103508161033d565b811461035b57600080fd5b50565b60008135905061036d81610347565b92915050565b60006020828403121561038957610388610333565b5b60006103978482850161035e565b91505092915050565b6103a98161033d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103e95780820151818401526020810190506103ce565b60008484015250505050565b6000601f19601f8301169050919050565b6000610411826103af565b61041b81856103ba565b935061042b8185602086016103cb565b610434816103f5565b840191505092915050565b600060408201905061045460008301856103a0565b81810360208301526104668184610406565b90509392505050565b600060208201905061048460008301846103a0565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104cc826103f5565b810181811067ffffffffffffffff821117156104eb576104ea610494565b5b80604052505050565b60006104fe610329565b905061050a82826104c3565b919050565b600067ffffffffffffffff82111561052a57610529610494565b5b610533826103f5565b9050602081019050919050565b82818337600083830152505050565b600061056261055d8461050f565b6104f4565b90508281526020810184848401111561057e5761057d61048f565b5b610589848285610540565b509392505050565b600082601f8301126105a6576105a561048a565b5b81356105b684826020860161054f565b91505092915050565b6000602082840312156105d5576105d4610333565b5b600082013567ffffffffffffffff8111156105f3576105f2610338565b5b6105ff84828501610591565b91505092915050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b600061063e6013836103ba565b915061064982610608565b602082019050919050565b6000602082019050818103600083015261066d81610631565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106ea57607f821691505b6020821081036106fd576106fc6106a3565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026107657fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610728565b61076f8683610728565b95508019841693508086168417925050509392505050565b6000819050919050565b60006107ac6107a76107a28461033d565b610787565b61033d565b9050919050565b6000819050919050565b6107c683610791565b6107da6107d2826107b3565b848454610735565b825550505050565b600090565b6107ef6107e2565b6107fa8184846107bd565b505050565b5b8181101561081e576108136000826107e7565b600181019050610800565b5050565b601f8211156108635761083481610703565b61083d84610718565b8101602085101561084c578190505b61086061085885610718565b8301826107ff565b50505b505050565b600082821c905092915050565b600061088660001984600802610868565b1980831691505092915050565b600061089f8383610875565b9150826002028217905092915050565b6108b8826103af565b67ffffffffffffffff8111156108d1576108d0610494565b5b6108db82546106d2565b6108e6828285610822565b600060209050601f8311600181146109195760008415610907578287015190505b6109118582610893565b865550610979565b601f19841661092786610703565b60005b8281101561094f5784890151825560018201915060208501945060208101905061092a565b8683101561096c5784890151610968601f891682610875565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220184dcc32e2339fbad88cc426aaec386429a6de91bc50dd9801c51aa151a048eb64736f6c634300081b0033'

# Informasi akun
account = '0xb5d83AC8B1d4829FF68844DA34Fe9E7778a6D06B'
key_utc_file = r'data\keystore\UTC--2024-08-21T05-45-17.497435400Z--b5d83ac8b1d4829ff68844da34fe9e7778a6d06b'

# Mendekripsi kunci pribadi dari keyfile
with open(key_utc_file) as keyfile:
    key_data = keyfile.read()
    pwd = 'rahasia'  # Gunakan password yang sesuai
    private_key = w3.eth.account.decrypt(key_data, pwd)

# Membangun kontrak
Contract = w3.eth.contract(abi=abi, bytecode=bytecode)

# Membangun transaksi
transaction = Contract.constructor().build_transaction({
    'from': account,
    'nonce': w3.eth.get_transaction_count(account),
    'gas': 2000000,
    'gasPrice': w3.to_wei('1.1', 'gwei')
})

# Menandatangani transaksi
signed_txn = w3.eth.account.sign_transaction(transaction, private_key)

# Fungsi untuk retry dengan timeout
def send_transaction_with_retry(signed_txn, max_retries=None, delay=5):
    retries = 0
    while True:
        try:
            # Kirim transaksi
            txn_hash = w3.eth.send_raw_transaction(signed_txn.raw_transaction)
            print(f"Transaction sent, hash: {txn_hash.hex()}")

            # Tunggu receipt transaksi
            txn_receipt = w3.eth.wait_for_transaction_receipt(txn_hash, timeout=60)
            print(txn_receipt)  # Menampilkan hasil default dari receipt
            return txn_receipt

        except AttributeError as e:
            retries += 1
            print(f"AttributeError occurred: {str(e)}, retrying... (Attempt {retries})")
            time.sleep(delay)
            if max_retries is not None and retries >= max_retries:
                print("Max retries reached. Transaction failed.")
                break
        except Exception as e:
            retries += 1
            print(f"Error occurred: {str(e)}, retrying... (Attempt {retries})")
            time.sleep(delay)
            if max_retries is not None and retries >= max_retries:
                print("Max retries reached. Transaction failed.")
                break

# Mengirim transaksi dengan retry tanpa batasan jumlah retry
send_transaction_with_retry(signed_txn, delay=5)